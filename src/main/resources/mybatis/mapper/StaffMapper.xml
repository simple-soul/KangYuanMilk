<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--对sql进行分类隔离,指定对应的mapper接口-->
<mapper namespace="com.springmvc.mapper.StaffMapper" >

    <select id="findStaffByUsername" parameterType="check" resultType="staff">
        SELECT * FROM `staff` WHERE `staff_username` = #{username}
        <include refid="whereNotDelete"/>
    </select>

    <update id="updatePassword" parameterType="check">
        UPDATE `staff` SET `staff_pwd` = #{password} WHERE `staff_username` = #{username}
        <include refid="whereNotDelete"/>
    </update>

    <select id="findStaffs" parameterType="query" resultType="staff">
        SELECT * from `staff`
        <where>
        <if test="key != null">
            CONCAT(IFNULL(`staff_name`,''),IFNULL(`staff_username`,''),IFNULL(`staff_idcard`,''),IFNULL(`staff_tel`,'')) LIKE concat(concat('%',#{key}),'%')
        </if>
        <if test="level != null">
            and  `staff_authority` = #{level}
        </if>
        <include refid="whereNotDelete"/>
        limit #{num}, 20
        </where>
    </select>

    <select id="getStaffsCount" resultType="Int">
        SELECT COUNT(*) FROM `staff`
    </select>

    <select id="findStaffByIdcard" parameterType="String" resultType="staff">
        SELECT * FROM `staff` WHERE `staff_idcard` = #{idcard}
    </select>

    <update id="deleteStaff" parameterType="staff">
        UPDATE `staff` SET  `isdeleted` = 1 WHERE `staff_id`=#{staff_id}
    </update>

    <update id="updateStaff" parameterType="staff">
        UPDATE `staff`
        SET
        staff_name = #{staff_name} ,
        staff_username = #{staff_username} ,
        staff_sex = #{staff_sex} ,
        staff_tel = #{staff_tel} ,
        staff_authority = #{staff_authority}
        WHERE
        staff_id = #{staff_id}
    </update>

    <insert id="insertStaff" parameterType="staff">
        INSERT INTO kangyuan.staff
        (
        staff_name,
        staff_username,
        staff_sex,
        staff_idcard,
        staff_tel,
        staff_authority
        )
        VALUES
        (
        #{staff_name},
        #{staff_username},
        #{staff_sex},
        #{staff_idcard},
        #{staff_tel},
        #{staff_authority}
        )

        <selectKey keyProperty="staff_id" resultType="Int" order="AFTER">
            SELECT @@IDENTITY AS staff_id
        </selectKey>
    </insert>

    <select id="getAddress" parameterType="int" resultType="ads">
        SELECT `ads`.*, `staff`.staff_name  FROM `ads` LEFT JOIN `staff` ON staff.staff_id=courier_id where parentId=#{id}
    </select>

    <select id="findAdsFromCourierId" parameterType="int" resultType="ads">
        SELECT * FROM `ads` WHERE courier_id=#{id}
    </select>

    <select id="findAddressFromAdsId" parameterType="int" resultType="address">
        SELECT * FROM `address` WHERE ads_id=#{id}
    </select>

    <select id="findOrderFromAddressId" parameterType="int" resultType="order">
        SELECT `order`.*,`order_distribution`.`distribution_startdate`,
        `order_distribution`.`distribution_enddate`,
        `order_distribution`.`distribution_renew`,
        `user`.`user_name`, `address`.`address_content`,
         `milk`.`milk_name` FROM `order`
        LEFT JOIN `order_distribution` ON order.distribution_id=order_distribution.distribution_id
        LEFT JOIN `user` ON order.user_id=user.user_id
        LEFT JOIN `address` ON order.address_id=address.address_id
        LEFT JOIN `milk` ON order.milk_id=milk.milk_id
        WHERE  order.address_id=#{id}
    </select>

    <sql id="whereNotDelete">
            and `isdeleted`=0
    </sql>
</mapper>